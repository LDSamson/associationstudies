subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch")
))
View(a)
View(immune_data_long)
immune_data$`Macrophages M0` <- NULL
summary(immune_data)
# I use some data from the following package: https://doi.org/10.3389/fimmu.2021.670070
# Furthermore, I add some variables with random data
set.seed(2022)
immune_data <- head(readRDS(url("https://figshare.com/ndownloader/files/25995722")), n=100)
immune_data$Sex <- sample(c("Men", "Women"), size = 100, replace = TRUE)
immune_data$Frailty.index <- runif(100, min = 0, max = 0.7)
immune_data$Batch <- sample(1:3, size = 100, replace = TRUE)
immune_data$`Macrophages M0` <- NULL
usethis::use_data(immune_data, overwrite = TRUE)
summary(immune_data)
library(thesisfunctions)
library(thesisfunctions)
immune_data_long <- immune_data %>%
pivot_longer(names_to = "cellnames", values_to = "value",
-c("Sex", "Frailty.index", "Batch"))
a <- purrr::map_dfr(cell_vars, .f = ~association_study(
dataset = immune_data_long,
subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch")
))
cell_vars <- names(immune_data)[!names(immune_data) %in%
c("Sex", "Frailty.index", "Batch")]
library(tidyr)
immune_data_long <- immune_data %>%
pivot_longer(names_to = "cellnames", values_to = "value",
-c("Sex", "Frailty.index", "Batch"))
a <- purrr::map_dfr(cell_vars, .f = ~association_study(
dataset = immune_data_long,
subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch")
))
View(a)
a <- purrr::map_dfr(cell_vars, .f = ~association_study(
dataset = immune_data_long,
subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch")
)) %>%
BH_selection()
View(a)
a <- purrr::map_dfr(cell_vars, .f = ~association_study(
dataset = immune_data_long,
subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch")
)) %>%
BH_selection()
plot_p_histogram(a)
association_study_long(immune_data_long,
response.names = cell_vars,
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch"))
association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch"))
cell_vars <- names(immune_data)[!names(immune_data) %in%
c("Sex", "Frailty.index", "Batch")]
library(tidyr)
immune_data_long <- immune_data %>%
pivot_longer(names_to = "cellnames", values_to = "value",
-c("Sex", "Frailty.index", "Batch"))
association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch"))
immune_data_long
a <- association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch"))
a <- association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch"))
a <- association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
immune_data_long
immune_data_long <- immune_data %>%
pivot_longer(names_to = "cellnames", values_to = "value",
-c("Sex", "Frailty.index", "Batch")) %>%
mutate(cellnames = factor(cellnames))
immune_data_long <- immune_data %>%
pivot_longer(names_to = "cellnames", values_to = "value",
-c("Sex", "Frailty.index", "Batch")) %>%
mutate(cellnames = factor(cellnames))
library(dplyr)
immune_data_long <- immune_data %>%
pivot_longer(names_to = "cellnames", values_to = "value",
-c("Sex", "Frailty.index", "Batch")) %>%
mutate(cellnames = factor(cellnames))
a <- purrr::map_dfr(cell_vars, .f = ~association_study(
dataset = immune_data_long,
subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch")
)) %>%
BH_selection()
a <- association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
response.names
data <- immune_data_long
response.names <- "cellnames"
data <- immune_data_long
response.names <- "cellnames"
purrr::map_dfr(unique(data[[response.names]]), .f = function(x){
df <- association_study_wide(
data %>% dplyr::filter({{response.names}} == x),
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex")))
df["Response var"] <- x
df
})
purrr::map_dfr(unique(data[[response.names]]), .f = function(x){
df <- association_study_wide(
data %>% dplyr::filter({{response.names}} == x),
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
df["Response var"] <- x
df
})
data %>% dplyr::filter({{response.names}} == x)
response.names
x <- "Tregs"
data %>% dplyr::filter({{response.names}} == x)
data
data$cellnames
table(data$cellnames)
data %>% dplyr::filter(response.names == x)
data %>% dplyr::filter(cellnames == x)
data %>% dplyr::filter(!!cellnames == x)
data %>% dplyr::filter(!!{{cellnames}} == x)
response.names
data %>% dplyr::filter(!!{{response.names}} == x)
data %>% dplyr::filter(!!response.names == x)
subset(data, response.names == x)
response.names
x
subset(data, {{response.names}} == x)
subset(data, {{sym(response.names)}} == x)
a <- association_study_long(immune_data_long,
response.names = cellnames,
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
data <- immune_data_long
response.names <- "cellnames"
x <- "Tregs"
subset(data, {{response.names}} == x)
data %>% dplyr::filter(!!response.names == x)
response.names <- "cellnames"
data %>% dplyr::filter({{response.names}} == x)
data %>% dplyr::filter(cellnames == x)
data[data[[response.names]] == x]
data[data[[response.names]] == x]
data[data[[response.names]] == x, ]
data %>% dplyr::filter(cellnames == x)
data[data[[response.names]] == x, ]
association_study_long <- function(data, response.names, ...){
purrr::map_dfr(unique(data[[response.names]]), .f = function(x){
df <- association_study_wide(data[data[[response.names]] == x, ], ...)
df["Response var"] <- x
df
})
}
a <- association_study_long(immune_data_long,
response.names = cellnames,
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
a <- association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
View(a)
View(a)
data[data[[response.names]] == x, ]
x
df <- association_study_wide(
data[data[[response.names]] == x, ]
subset(data, cellnames == x)
data %>% dplyr::filter(cellnames == x),
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
df <- association_study_wide(
data[data[[response.names]] == x, ]
subset(data, cellnames == x)
data %>% dplyr::filter(cellnames == x),
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
df <- association_study_wide(
data[data[[response.names]] == x, ]
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
df <- association_study_wide(
data[data[[response.names]] == x, ],
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
df["Response var"] <- x
df
library(thesisfunctions)
#functions to test:
library(tidyr)
library(dplyr)
library(thesisfunctions)
cell_vars <- names(immune_data)[!names(immune_data) %in%
c("Sex", "Frailty.index", "Batch")]
immune_data_long <- immune_data %>%
pivot_longer(names_to = "cellnames", values_to = "value",
-c("Sex", "Frailty.index", "Batch")) %>%
mutate(cellnames = factor(cellnames))
a <- purrr::map_dfr(cell_vars, .f = ~association_study(
dataset = immune_data_long,
subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch")
)) %>%
BH_selection()
plot_p_histogram(a)
table(data$cellnames)
a <- association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
View(a)
View(immune_data_long)
association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
View(a)
a <- purrr::map_dfr(cell_vars, .f = ~association_study(
dataset = immune_data_long,
subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch")
))
View(a)
data <- immune_data_long
response.names <- "cellnames"
x <- "Tregs"
purrr::map_dfr(unique(data[[response.names]]), .f = function(x){
df <- association_study_wide(
data[data[[response.names]] == x, ],
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
df["Response var"] <- x
df
})
x
df <- association_study_wide(
data[data[[response.names]] == x, ],
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
df
df["Response var"] <- x
df
immune_data_long <- immune_data %>%
pivot_longer(names_to = "cellnames", values_to = "value",
-c("Sex", "Frailty.index", "Batch"))
a <- purrr::map_dfr(cell_vars, .f = ~association_study(
dataset = immune_data_long,
subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch")
)) %>%
BH_selection()
plot_p_histogram(a)
table(data$cellnames)
association_study_long2 <- function(data, response.names, ...){
data <- immune_data_long
response.names <- "cellnames"
x <- "Tregs"
purrr::map_dfr(unique(data[[response.names]]), .f = function(x){
df <- association_study_wide(
data[data[[response.names]] == x, ],
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
df["Response var"] <- x
df
})
}
a <- association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex"))
View(a)
b <- association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex")) %>%
BH_selection()
a <- purrr::map_dfr(cell_vars, .f = ~association_study(
dataset = immune_data_long,
subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch")
)) %>%
BH_selection()
View(a)
View(b)
# careful: if response.names variable is a factor, the names will not
# be displayed properly in the output data frame!
b <- association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch")) %>%
BH_selection()
a <- purrr::map_dfr(cell_vars, .f = ~association_study(
dataset = immune_data_long,
subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch"),
n.resample = 10^4
)) %>%
BH_selection()
# careful: if response.names variable is a factor, the names will not
# be displayed properly in the output data frame!
b <- association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch"),
n.resample = 10^4) %>%
BH_selection()
mutate(p.value = round(p.value, digits = 1) %>%
a <- purrr::map_dfr(cell_vars, .f = ~association_study(
dataset = immune_data_long,
subset.parameter = .,
subset.column = "cellnames",
numerical.value = "value",
comparison.value = "Frailty.index",
stratum = c("Sex", "Batch"),
n.resample = 10^4
)) %>%
mutate(p.value = round(p.value, digits = 1)) %>%
BH_selection()
# careful: if response.names variable is a factor, the names will not
# be displayed properly in the output data frame!
b <- association_study_long(immune_data_long,
response.names = "cellnames",
response.var = "value",
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch"),
n.resample = 10^4) %>%
mutate(p.value = round(p.value, digits = 1)) %>%
BH_selection()
immune_data_long
library(purrr)
map_dfr(unique(data[[response.names]]), .f = ~association_study_wide(
immune_data,
response.var = .,
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch"),
n.resample = 10^4
))
immune_data[[response.names]]
map_dfr(cell_vars, .f = ~association_study_wide(
immune_data,
response.var = .,
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch"),
n.resample = 10^4
))
c <- map_dfr(cell_vars, .f = ~association_study_wide(
immune_data,
response.var = .,
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch"),
n.resample = 10^4
))
c <- map_dfr(cell_vars, .f = ~association_study_wide(
immune_data,
response.var = .,
explanatory.var = "Frailty.index",
stratum = c("Sex", "Batch"),
n.resample = 10^4
)) %>%
BH_selection()
View(c)
library(thesisfunctions)
# single.pair <- c("CXCL10/IP-10", "CXCL11/I-TAC" )
## Create function for single pair association
## original dataset: immune.trajectories.long.endpoint
#' @importFrom rlang .data
perform_single_pair_test <- function(
single.pair,
data.set,
resampling.number = 10^4,
stratum         = NULL
){
# single.pair <- c("Granuloytes", "Monocytes") # for debugging
if(length(single.pair) != 2){warning(
"single pair should contain exactly two variables to compare"
)}
vars.to.select <- c(single.pair, stratum)
names(single.pair) <- NULL
# only select complete cases:
data.for.test.i <- data.set %>%
dplyr::select(vars.to.select) %>%
stats::na.omit()
formula.string <- paste0(addq(single.pair), collapse = "~")
# Add block to formula if existing:
if(!is.null(stratum)){
data.for.test.i <- data.for.test.i %>%
# if block contains more than one variable, this will concatenate them:
tidyr::unite(col = "block", tidyselect::all_of(stratum)) %>%
dplyr::mutate(block = factor(.data$block))
formula.string <- stats::as.formula(paste0(formula.string, "|block"))
## test whether blocks with two or less measurements exist:
obs.per.block <- data.for.test.i %>%
dplyr::group_by(.data$block) %>%
dplyr::summarize('n.per.block' = dplyr::n())
# omit blocks with not enough measurements (the correlation
# is perfect/ does not make sense):
if(any(obs.per.block$n.per.block<=2)){
blocks.to.print <- obs.per.block %>%
dplyr::filter(.data$n.per.block<=2) %>%
tidyr::unite(col ="block", sep = ": ") %>%
dplyr::pull(.data$block)
warning(paste0("some blocks with too few observations detected;",
"these will be omitted from analysis:\n",
paste0(blocks.to.print, collapse = ", ")))
}
data.for.test.i <- dplyr::left_join(data.for.test.i, obs.per.block,
by = "block") %>%
dplyr::filter(.data$n.per.block >2)
}
formula.to.test  <- stats::as.formula(formula.string)
test.results     <- coin::spearman_test(
formula.to.test,
data = data.for.test.i,
distribution = coin::approximate(nresample = resampling.number)
)
#### calculate rho: ####
global.rho <- weighted_average_rho(data = data.for.test.i, x = single.pair[1],
y = single.pair[2], stratum = "block")
######### End of calculating rho ###########
data.to.return.i <- data.frame(
"first.var"   = single.pair[1],
"second.var"  = single.pair[2],
"sample.size" = nrow(data.for.test.i),
"stratified.by" = "",
"Direction"   = sign(coin::statistic(test.results)),
"rho"         = global.rho,
"p.value"     = as.numeric(coin::pvalue(test.results)),
stringsAsFactors = F
)
if(!is.null(stratum)){
data.to.return.i$`stratified.by` <- paste(stratum, collapse = "_")
}
return(data.to.return.i)
}
rlang::is_vector
